// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract MemeCoin is ERC20 {
    address public owner;

    constructor() ERC20("MemeCoin", "MEMEC") {
        owner = msg.sender;
        _mint(msg.sender, 1000 * 7 ** decimals());
    }
        // The token owner address should match the called address to run.
    modifier onlyOwner() {
        require(msg.sender == owner, "I can only call this as an owner of the ERC-20 token");
        _;
    }
        // The token address should be the same as the address of the owner to perform or run.
    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }
        //
    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
    }

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        return super.transfer(recipient, amount);
    }
        // It inherits the functionality of transferring tokens from one account to another account
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        return super.transferFrom(sender, recipient, amount);
    }
}
